import subprocess
import time
from zapv2 import ZAPv2
import configparser

def rpcServiceInfo(host):
    command = 'rpcinfo'
    rpcDictEle = {
    }
    count = 0; 
    process = subprocess.Popen(['rpcinfo','-p',host], 
                           stdout=subprocess.PIPE,
                           universal_newlines=True)  
    while True:
      output = process.stdout.readline()
      print(output.strip())
      lineArr = output.split()
      rpcDictArr = []
      finaloutput = output
      return_code = process.poll()
      if return_code is not None:
         print('RETURN CODE', return_code)
         # Process has finished, read rest of the output 
         for output in process.stdout.readlines():
               finaloutput = finaloutput + output.strip() +"\n"
               lineArr = output.split()
               rpcDictEle ={}
               rpcDictEle["program"] = lineArr[0]
               rpcDictEle["version"] = lineArr[1]
               rpcDictEle["proto"] = lineArr[2]
               rpcDictEle["port"] = lineArr[3]
               rpcDictEle["service"] = lineArr[4]
               rpcDictArr.append(rpcDictEle)
            
      return rpcDictArr
    
def zapSpiderInfo(host):
    # The URL of the application to be tested
    # Change to match the API key set in ZAP, or use None if the API key is disabled
    config = configparser.ConfigParser()
    config.read('config.ini')
    target = "https://" + host
    apiKey = None
    http_proxy = ''
    https_proxy = ''
    if 'ZAP' in config:
      vm_def = config['ZAP']
      if config.has_option('ZAP', 'apiKey'):
          apiKey = vm_def['apiKey']
      else:
          return "ZAP API Key not configured"
      if config.has_option('ZAP', 'http_proxy') and config.has_option('ZAP', 'https_proxy'):
          http_proxy = vm_def['http_proxy']
          https_proxy = vm_def['https_proxy']
      else:
          http_proxy = ""
          https_proxy = ""

    # By default ZAP API client will connect to port 8080
    if not http_proxy and not https_proxy:
        zap = ZAPv2(apikey=apiKey)
    else:
        zap = ZAPv2(apikey=apiKey, proxies={'http': http_proxy, 'https': https_proxy})

    print('Spidering target {}'.format(target))
    # The scan returns a scan id to support concurrent scanning
    scanID = zap.spider.scan(target)
    while int(zap.spider.status(scanID)) < 100:
        # Poll the status until it completes
        print('Spider progress %: {}'.format(zap.spider.status(scanID)))
        time.sleep(1)

    print('Spider has completed!')
    # The URLs the spider has crawled
    print('\n'.join(map(str, zap.spider.results(scanID))))
    return (zap.spider.results(scanID))