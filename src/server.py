from flask import Flask
from flask import request
import subprocess
import platform
import paramiko
import socket
import ssl
server = Flask(__name__)


@server.route("/ssl_version/<host>")
def ssl_version(host):
    hostname = host
    context = ssl.create_default_context()
    with socket.create_connection((hostname, 443)) as sock:
        with context.wrap_socket(sock, server_hostname=hostname) as ssock:
            return ssock.version()

@server.route("/ping/<host>")
def ping(host):
    #windows ping is ping -n 1 while POSIX is ping -c
    param = '-n' if platform.system().lower()=='windows' else '-c'
    # Building the command. Ex: "ping -c 1 google.com"
    command = ['ping', param, '1', host]
    ret = ""
    if subprocess.call(command) == 0:
        ret = "Host is Pingable"
        pass
    else:
        ret = "Host is not Pingable"
        pass
    return ret

@server.route("/cmd_ls")
def ls():
   process = subprocess.Popen(['ls', '-l'], 
                           stdout=subprocess.PIPE,
                           universal_newlines=True)   
   while True:
      output = process.stdout.readline()
      print(output.strip())
      finaloutput = output +"<br>"
      # Do something else
      return_code = process.poll()
      if return_code is not None:
         print('RETURN CODE', return_code)
         # Process has finished, read rest of the output 
         for output in process.stdout.readlines():
               finaloutput = finaloutput + output.strip() +"<br>"
      return finaloutput


@server.route("/cmd_pwd")
def pwd():
    process = subprocess.Popen(['pwd'], 
                           stdout=subprocess.PIPE,
                           universal_newlines=True)  
    while True:
      output = process.stdout.readline()
      print(output.strip())
      finaloutput = output
      return_code = process.poll()
      if return_code is not None:
         print('RETURN CODE', return_code)
         # Process has finished, read rest of the output 
         for output in process.stdout.readlines():
               finaloutput = finaloutput + output.strip() +"\n"
      return finaloutput


@server.route("/scan/<host>")
def scan(host):
   hostname = "192.168.0.104"
   username = "kali"
   password = "kali"
   #toBeScanned = "192.168.0.106"
   toBeScanned = host
   commands = [
    "pwd",
    "timeout 180s msfconsole -q -x 'nmap -sV "+toBeScanned+"'; exit;",
    "ls -l"
    ]
   
   client = paramiko.SSHClient()
   # add to known hosts
   client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
   try:
      client.connect(hostname=hostname, username=username, password=password)
   except:
      print("[!] Cannot connect to the SSH Server")
      exit()
   output = '<br>Scanning all ports in host:<br>'
   for command in commands:
     print("="*50, command, "="*50)
     stdin, stdout, stderr = client.exec_command(command)
     lineoutput = stdout.read().decode()+"<br>"
     lineoutput = lineoutput.replace('\n','<br>')
     print(lineoutput)
     output = output + lineoutput
     err = stderr.read().decode()
     if err:
      print(err)
   return output
   

@server.route("/")
def hello():
   return "Hello World!"

if __name__ == "__main__":
   server.run(host='0.0.0.0', port=4999, debug=True)
