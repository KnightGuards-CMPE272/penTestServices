from flask import Flask
from flask_cors import CORS
from flask import request
import subprocess
import platform
import paramiko
import socket
import ssl
import helper
import nmap3
import json
import db 
import os
from bson import ObjectId, json_util
from datetime import datetime
server = Flask(__name__)
cors = CORS(server, resources={r"/*": {"origins": "*"}})


class JSONEncoder(json.JSONEncoder):
    def default(self, o):
         if isinstance(o, ObjectId):
            return str(o)
         if isinstance(o, datetime):
            return str(o)
         return json.JSONEncoder.default(self, o)



@server.route("/ssl_version/<host>")
def ssl_version(host):
    hostname = host
    context = ssl.create_default_context()
    with socket.create_connection((hostname, 443)) as sock:
        with context.wrap_socket(sock, server_hostname=hostname) as ssock:
            return ssock.version()

@server.route("/ping/<host>")
def ping(host):
    #windows ping is ping -n 1 while POSIX is ping -c
    param = '-n' if platform.system().lower()=='windows' else '-c'
    # Building the command. Ex: "ping -c 1 google.com"
    command = ['ping', param, '1', host]
    ret = ""
    if subprocess.call(command) == 0:
        ret = "Host is Pingable"
        pass
    else:
        ret = "Host is not Pingable"
        pass
    return ret

@server.route("/cmd_ls")
def ls():
   process = subprocess.Popen(['ls', '-l'], 
                           stdout=subprocess.PIPE,
                           universal_newlines=True)   
   while True:
      output = process.stdout.readline()
      print(output.strip())
      finaloutput = output +"<br>"
      # Do something else
      return_code = process.poll()
      if return_code is not None:
         print('RETURN CODE', return_code)
         # Process has finished, read rest of the output 
         for output in process.stdout.readlines():
               finaloutput = finaloutput + output.strip() +"<br>"
      return finaloutput


@server.route("/cmd_pwd")
def pwd():
    process = subprocess.Popen(['pwd'], 
                           stdout=subprocess.PIPE,
                           universal_newlines=True)  
    while True:
      output = process.stdout.readline()
      print(output.strip())
      finaloutput = output
      return_code = process.poll()
      if return_code is not None:
         print('RETURN CODE', return_code)
         # Process has finished, read rest of the output 
         for output in process.stdout.readlines():
               finaloutput = finaloutput + output.strip() +"\n"
      return finaloutput

@server.route("/scan/<host>")
def nmap(host):
   #parsedOutput = helper.parseOutput(textI) 
   nmap = nmap3.Nmap()
   version_result = nmap.nmap_version_detection(host)
   #version_result ='{}'
   if (len(version_result) > 3):
      print("Inside Scan results")
      file = open('scanresults.json', 'w+')
      jsonResult = json.dumps(version_result)
      file.write(jsonResult)
      file.close()
      
   else:
      file = open('scanresults.json','r')
      version_result = file.read()    
   
   responseDict  = eval(version_result)
   resultKeys = list(responseDict.keys())
   resultDict = {}
   resultDict['hostname'] = resultKeys[0]
   resultDict['scannedResult'] = responseDict[resultKeys[0]]
   resultDict['scannedDate'] = str(datetime.now())
   
   mongoObj = resultDict.copy()
   if os.getenv('MONGO'):
      id=db.storeScanResult(mongoObj)
      print("Id:"+str(id))  
      
   return json.dumps(resultDict)

@server.route("/scannedresults")
def getScannedResults():
   if os.getenv('MONGO'):
      results = db.getScanResult()
      json_docs = []
      for doc in results:
         json_docs.append(doc)
   
         print(json_docs)
         finalResult = json.dumps(json_docs)
         file = open('scanresults_all.json', 'w+')
         file.write(finalResult)
         file.close() 
   else:
      file = open('scanresults_all.json','r')
      finalResult = file.read()
      
   return finalResult

@server.route("/kaaliscan/<host>")
def scan(host):
   hostname = "192.168.0.102"
   username = "kali" 
   password = "kali"
   #toBeScanned = "192.168.0.106"
   toBeScanned = host
   commands = [
    #"pwd",
    "timeout 180s msfconsole -q -x 'nmap -sV "+toBeScanned+"'; exit;"
    #"ls -l"
    ]
   
   client = paramiko.SSHClient()
   # add to known hosts
   client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
   try:
      client.connect(hostname=hostname, username=username, password=password)
   except:
      print("[!] Cannot connect to the SSH Server")
      exit()
   output = '<br>Scanning all ports in host:<br>'
   for command in commands:
     print("="*50, command, "="*50)
     stdin, stdout, stderr = client.exec_command(command)
     lineoutput = stdout.read().decode()+"<br>"
     #lineoutput = lineoutput.replace('\n','<br>')
     print(lineoutput)
     output = output + lineoutput
     err = stderr.read().decode()
     if err:
      print(err)
   print("*********************************************")
   helper.parseOutput(output)
   print("*********************************************")
   return output
   

@server.route("/")
def hello():
   return "Hello World!"

if __name__ == "__main__":
   server.run(host='0.0.0.0', port=4999, debug=True)
