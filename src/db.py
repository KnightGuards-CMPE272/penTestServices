import pymongo
import os
from bson.objectid import ObjectId

mongoUrl = "mongodb://host.docker.internal:27017/" if os.getenv('DOCKER') else "mongodb://localhost:27017/"

mongoClient = pymongo.MongoClient(mongoUrl)
   
def storeScanResult(scanResult):
    pentestDB = mongoClient["pentesterdb"]
    scanResults = pentestDB["scanResults"]
    print(mongoClient.list_database_names())
    print(pentestDB.list_collection_names())
    dboutput = scanResults.insert_one(scanResult)
    print(str(dboutput))
    return dboutput
    
def getScanResult(limit):
    pentestDB = mongoClient["pentesterdb"]
    scanResults = pentestDB["scanResults"]
    print(mongoClient.list_database_names())
    print(pentestDB.list_collection_names())
    dboutput = scanResults.find({},{ "_id": 1, "hostname": 1, "scannedResult":1, "scannedDate": 1 }).sort([("scannedDate",pymongo.DESCENDING)]).limit(int(limit))
    print(str(dboutput))
    return dboutput

def getSingleScanResult(id):
    pentestDB = mongoClient["pentesterdb"]
    scanResults = pentestDB["scanResults"]
    print(mongoClient.list_database_names())
    print(pentestDB.list_collection_names())
    dboutput = scanResults.find_one({"_id":ObjectId(id)},{ "_id": 1, "hostname": 1, "scannedResult":1, "scannedDate": 1 , "rpcInfo":1, "zapInfo":1})
    print(str(dboutput))
    return dboutput
    
